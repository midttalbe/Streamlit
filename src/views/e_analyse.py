import streamlit as st
from src.views.components import side_bar
from src.controllers.analyse import Analyse

def load_problematique():
    st.subheader("La probl√®matique :")

    st.markdown("""
    Ce jeu de donn√©es a √©t√© analys√© selon la probl√©matique suivante :

    Quel est le meilleur moment pour r√©server une chambre d'h√¥tel selon ces 4 angles de vue : 
    1) Le meilleur moment pour √™tre au calme avec le moins d'affluence possible
    2) Le meilleur moment pour avoir le plus de diversit√© en termes de pays repr√©sent√©s
    3) Le meilleur moment pour les voyages selon que l'on s√©journe avec des enfants ou sans enfants
    4) Le meilleur moment pour b√©n√©ficier d'un sur-classement de type de chambre 
    """)

def load_transformation():
    st.markdown("Pour pouvoir analyser correctement le jeu de donn√©es et r√©pondre √† la probl√©matique, le jeu de donn√©es a subi des transformations qui sont d√©crites ci-dessous :")
    
    st.markdown("""
    - Suppression des colonnes "agent" et "company" car inutile dans notre analyse 
    """)
    with st.expander("Voir le code python :"):
        st.code("""
# Suppression des colonnes "agent" et "company"
drop_column = ['agent','company']
for col in df.columns:
    if col in drop_column:
        df.drop(col,axis=1,inplace=True)
        """)

    st.markdown("""
    - Ajout d'une colonne "arrival_date_month_number" qui converti le nom du mois en num√©ro de mois
    """)
    with st.expander("Voir le code python :"):
        st.code("""
map_month = {'January':"1", 'February':"2", 'March':"3", 'April':"4", 'May':"5", 'June':"6",
             'July':"7", 'August':"8", 'September':"9", 'October':"10", 'November':"11", 'December':"12"}

# Ajout d'une colonne calcul√© 'arrival_date_month_number' deriv√© de la colonne 'arrival_date_month'
df['arrival_date_month_number'] = df['arrival_date_month'].map(map_month)
        """)

    st.markdown("""
    - Calcul d'une colonne "arrival_date" de type date 
    """)
    with st.expander("Voir le code python :"):
        st.code("""
# Ajout d'une colonne de type date "arrival_date"
df['arrival_date'] = df['arrival_date_year'].astype('string') + '-' + df['arrival_date_month_number'] + '-' + df['arrival_date_day_of_month'].astype('string')
df['arrival_date'] = pd.to_datetime(df['arrival_date'])         
        """)

    st.markdown("""
    - Convertie au format datetime la colonne "reservation_status_date" 
    """)
    with st.expander("Voir le code python :"):
        st.code("""
        df['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])
        """)

    st.markdown("""
    - Calcul du nombre de nuit√©
    """)
    with st.expander("Voir le code python :"):
        st.code("""
df['Nb_total_nuit'] = df['reservation_status_date'] - df['arrival_date']
df['Nb_total_nuit'] = df['Nb_total_nuit'].dt.days
df['stays_total'] = df['stays_in_week_nights'] + df['stays_in_weekend_nights']    
    """)

    st.markdown("""
    - Ajout colonne departure_date = arrival_date + nb_stays pour les lignes not canceled
    """)
    with st.expander("Voir le code python :"):
        st.code("""
df['departure_date'] = df['arrival_date'] + pd.to_timedelta(df['stays_total'], unit='D')
df['departure_date'] = pd.to_datetime(df['departure_date'])
    """)

    st.markdown("""
    - Remplace les valeurs NA dans la colonne "children" par 0
    """)
    with st.expander("Voir le code python :"):
        st.code("""
    df["children"] = df['children'].fillna(0)
    """)

    st.markdown("""
    - Ajout du nombre total de client = nombre d'adultes + nombre d'enfants + nombre de b√©b√©s
    """)
    with st.expander("Voir le code python :"):
        st.code("""
    df['total_client'] = df['adults'] + df['children'] + df['babies']
    """)

    st.markdown("""
    - Cr√©er un dataframe avec les reservations confirm√©es
    """)
    with st.expander("Voir le code python :"):
        st.code("""
    df_booked = df.loc[df['is_canceled']==0]
    """)

    st.markdown("""
    - Cr√©ation d'une rang√© de date depuis arrival_date jusqu'√† departure_date
        Ceci afin de pouvoir calculer la dur√©e moyenne de s√©jour concernant le client ou les clients.<br>
        Le r√©sulat est stock√© dans un dataframe afin de pouvoir le joindre au dataframe global pour effectuer des calculs de dur√©e
    """,unsafe_allow_html=True)
    with st.expander("Voir le code python :"):
        st.code("""
df_booked = df_booked.loc[:,['arrival_date','departure_date','booking_id']]

def proc(row):
    dct = row.loc['booking_id':'booking_id'].to_dict()
    return pd.DataFrame({'Date': pd.date_range(row.arrival_date, row.departure_date)}).assign(**dct)

df_booked_date = pd.concat(df_booked.apply(proc, axis=1).tolist(), ignore_index=True)        
        """)

    st.markdown("""
    - Ajout de hi√©rarchies de date dans le dataframe "df_booked_date" : <br> - "Year" <br> - "Quarter" <br> - "Month Name" <br> - "Month Number" <br> - "Week Number" <br> - "Day of Month" <br> - "Day Name" <br> - "Day Number" <br> - "Day Type"
    """,unsafe_allow_html=True)
    with st.expander("Voir le code python :"):
        st.code("""
df_booked_date["Year"] = df_booked_date.Date.dt.year
df_booked_date["Quarter"] = df_booked_date.Date.dt.quarter
df_booked_date["Month Name"] = df_booked_date.Date.dt.month_name("fr")
df_booked_date["Month Number"] = df_booked_date.Date.dt.month
df_booked_date["Week Number"] = df_booked_date.Date.dt.week
df_booked_date["Day of Month"] = df_booked_date.Date.dt.day
df_booked_date["Day Name"] = df_booked_date.Date.dt.day_name("fr")
df_booked_date["Day Number"] = df_booked_date.Date.dt.day_of_week+1
df_booked_date["Day Type"] = df_booked_date.Date.dt.day_of_week.apply(lambda x: "Fin de semaine (weekend)" if x > 5 else "Jour de semaine")    
    """)

# Analyse 1 - 1 : analyse par mois et par ann√©es en graphique √† bar
def load_analyse_1_1(a:Analyse,ann√©e:int):
    return a.analyse_1_1(ann√©e)
# Analyse 1 - 2 : analyse par semestre et par mois toutes ann√©es confondus en graphique bo√Æte √† moustache
def load_analyse_1_2(a:Analyse,semestre:int):
    return a.analyse_1_2(semestre)
# Analyse 1 - 3 : analyse par rapport au num√©ro du jour dans le mois ceci par ann√©es en graphique en camembert 
def load_analyse_1_3(a:Analyse,ann√©e:int):
    return a.analyse_1_3(ann√©e)
# Analyse 1 - 4 : analyse par rapport au type de jour (Week end / Jour de semaine) toutes ann√©es confondus en graphique cluster
def load_analyse_1_4(a:Analyse,graph_type:str):
    return a.analyse_1_4(graph_type)
# Analyse 2 - 1 : distribution de la diversit√© des pays par mois et par ann√©es
def load_analyse_2_1(a:Analyse,ann√©e:int):
    return a.analyse_2_1(ann√©e)
# Analyse 2 - 2 : top 3 des pays les plus represent√© selon le mois et l'ann√©e
def load_analyse_2_2(a:Analyse, ann√©e:int):
    return a.analyse_2_2(ann√©e)
# Analyse 3 - 1 : distribution par cat√©gorie (Enfants / Sans enfants) selon le mois et l'ann√©e
def load_analyse_3_1(a:Analyse, ann√©e:int):
    return a.analyse_3_1(ann√©e)
# Analyse 3 - 2 : graphique polaire par sous cat√©gorie (Couple, Seule, Groupe, Enfants seules) par mois toutes ann√©es confondues
def load_analyse_3_2(a:Analyse):
    return a.analyse_3_2()
# Analyse 4 - 1 : HeatMap r√©partition des surclassements, d√©classements et inchang√©es
def load_analyse_4_1(a:Analyse):
    return a.analyse_4_1()
# Analyse 4 - 2 : Linechart de r√©partition des surclassements, d√©classements et inchang√©es selon le mois toutes ann√©es confondues
def load_analyse_4_2(a:Analyse):
    return a.analyse_4_2()


def load_view():
    col_a,col_b,col_c = st.columns([1,4,1])
    a = Analyse()
    a.read()

    with col_b:
        side_bar.load_sidebar()
        
        st.title("Analyse du dataset")
        load_problematique()

        select_slider_list_year = 2015,2016, 2017,"Toutes ann√©es"

        tab1, tab2 = st.tabs(["La transformation de donn√©es","L'analyse"])
        with tab1:
            st.subheader("La transformation de donn√©es")
            # with st.expander("Liste des transformations globales :"):
            load_transformation()

        with tab2:
            st.subheader("L'analyse :")
            with st.expander("üìÖ - **1) Le meilleur moment pour √™tre au calme avec le moins d'affluence possible**"):
                choix_options = ["Par mois et par ann√©es - Graphique √† Bar",
                                "Par semestre et par mois toutes ann√©es confondus - Bo√Æte √† moustache",
                                "Par rapport au num√©ro du jour dans le mois par ann√©es - Camembert",
                                "Par rapport au jour de la semaine pour toutes les ann√©es - Cluster"
                                ]
                choix_index = [1,2,3,4]
                choix_dict = dict(zip(choix_index,choix_options))

                st.markdown("""
                #### Le but de cette analyse est de pouvoir d√©gager une tendance temporelle via diff√©rent angle de vue : <br>
a) Fr√©quentation par rapport au mois et √† l'ann√©e <br>
b) Distribution par rapport au semestre et au mois <br>
c) Fr√©quentation par rapport au num√©ro du jour dans le mois <br>
d) Fr√©quentaton par rapport au jour de la semaine
                """,unsafe_allow_html=True)

                choix = st.selectbox("Choisissez votre analyse :",options=choix_options,index=1)
                
                if choix == choix_dict[1]:

                    year = st.select_slider("Ann√©e ?", options=select_slider_list_year,label_visibility="visible",key="slider_analyse_1_1")

                    if year == "Toutes ann√©es": year = 0

                    plt_graph = load_analyse_1_1(a, year)

                    st.pyplot(plt_graph)
                    st.markdown("""
                    #### **<u>M√©thode de calcul de la fr√©quentation journali√©re :</u>**

        Pour ce calcul, on utilise le champ "Arrival Date" qui represente la date d'arriv√©e √† l'hotel et le champ "Nb Stays" qui represente le nombre de nuit√©es.

        Ensuite, on calcule la date de d√©part suivant ces deux champs :<br>
                -"Date de d√©part" = "Date d'arriv√©e" + "Nombre de nuit√©"

        Enfin, pour chacune des dates pr√©sentes entre la date d'arriv√©e et la date de d√©part, on effectue une somme du nombre de client par jour puis la moyenne de cette m√™me somme par mois :<br>
                - Somme(Nb Client) par jour => Moyenne(Somme(Nb Client) par jour) par mois
                    """,unsafe_allow_html=True)

                    st.markdown("""
                    #### **<u>Analyse des graphiques :</u>**                    

        On a ici une representation par mois et par ann√©e de la moyenne jourrnali√®re de fr√©quentation sous forme de graphique √† bar.

        Les 3 premiers graphiques representent respectivement l'ann√©e 2015 en bleu, l'ann√©e 2016 en orange et l'ann√©e 2017 en vert.<br>
        Pour chacun de ces 3 graphiques, le minimum est represent√© par une couleur rouge.<br>
        On remarque que pour les ann√©es 2015 et 2017, on ne poss√®de pas d'ann√©e compl√©te. Ceci va donc fausser la moyenne globale par mois toutes ann√©es confondues (voir graphique "Toutes ann√©es").<br>

        Pour l'ann√©e 2015, on a un minimum de fr√©quentation journali√®re situ√© au mois de d√©cembre.<br>
        Pour l'ann√®e 2016, ce m√™me minimum se situe au mois de janvier.

        Enfin concernant l'ann√©e 2017, le minimum se situe au mois de Septembre. <br>
        Concernant ce dernier r√©sultat, on constate que ce minimum est d√ª √† un deficit de donn√©es. <br>
        En effet, le dataset couvre une p√©riode allant de Ao√ªt 2015 √† Ao√ªt 2017 pour le champ "Arrival Date". (voir m√©thode de calcul de la fr√©quentation journali√®re)<br>

        On voit donc ici que l'on ne peut √©tablir une tendance suivant le mois. <br>
        Cependant si l'on tient compte de 2016 qui est une ann√©e compl√®te, on peut voir que le minimum se situe en Janvier.<br>
        Ceci est corrobor√© par le dernier graphique (noir) dont le minium est lui aussi situ√© au mois de Janvier.<br>

                    """,unsafe_allow_html=True)

                elif choix == choix_dict[2]:
                    # st.markdown(choix_dict[2])

                    # Calcul des graphiques √† moustache par semestre
                    plt_semestre1 = load_analyse_1_2(a,0)
                    plt_semestre2 = load_analyse_1_2(a,1)
                    
                    # Affichage des graphiques
                    st.pyplot(plt_semestre1)
                    st.pyplot(plt_semestre2)

                    # Affichage du texte de methode de calcul et d'analyse
                    st.markdown("""
                    #### **<u>Methode de calcul :</u>**<br>

Ici, on prend le total client brut par jour pour que le graphique puisse calculer la distribution journali√©re selon le mois de l'ann√©e avec le min, le max, la mediane et le deux quantiles (25% et 75%). <br><br>
                    """,unsafe_allow_html=True)
                    st.markdown("""
                    #### **<u>Analyse des graphiques :</u>**<br>

On a ici deux graphiques boites √† moustache, le premier represente le 1er semestre et le deuxi√®me represente le 2eme semestre.<br>

Sur le graphique representant le premier semestre, on voit se d√©gager une tendance montante depuis le d√©but du premier semestre vers la fin du premier semestre.<br>
Le minimum se situe ici en janvier. Ce qui vient confirmer l'analyse des graphique √† bar.<br>
Pour janvier, on a un minimum √† environ 300 et un maximum √† presque 600.<br>
La m√©diane se situe un peu en dessous de 500.<br>

Sur celui representant le second semestre, on voite se d√©gager une tendance d√©scendante depuis le d√©but du second semestre vers la fin du second semestre.<br>
On remarque un l√©ger rebond en Octobre.<br>
Le minimum se situe lui au mois de Septembre, ceci est d√ª surement au d√©ficit de donn√©es expliqu√© lors de l'analyse des graphiques √† bar.<br>

On voit que **le minimum se situe bien en Janvier** ce qui vient corrobor√© nos analyses des grapiques √† bar ci-dessus.<br><br>
                    """,unsafe_allow_html=True)


                elif choix == choix_dict[3]:
                    # st.markdown(choix_dict[3])
                    year = st.select_slider("Ann√©e ?", options=select_slider_list_year,label_visibility="visible",key="slider_analyse_1_3")
                    if year == "Toutes ann√©es": year = 0

                    # Calcul des graphiques
                    plt_graph = load_analyse_1_3(a, year)

                    # Affichage des graphiques
                    st.pyplot(plt_graph)

                    # Affichage Methode de calcul
                    st.markdown("""
                    #### **<u>M√©thode de calcul :</u>**<br>

Ici, la fr√©quentation est calcul√© en 3 √©tapes :<br>

 **<u>Etape 1 :</u>** Somme(Nombre de client) par jour<br>

 **<u>Etape 2 :</u>** Cr√©ation de cat√©gorie "groupement de jours" selon le num√©ro du jour dans le mois :<br>
            -> "01 - 05" : inclus les jours 1, 2, 3, 4 et 5<br>
            -> "06 - 10" : inclus les jours 6, 7, 8, 9 et 10<br>
            -> "11 - 15" : inclus les jours 11, 12, 13, 14 et 15<br>
            -> "16 - 20" : inclus les jours 16, 17, 18, 19 et 20<br>
            -> "21 - 25" : inclus les jours 21, 22, 23, 24 et 25<br>
            -> "> 25"    : inclus tous les jours > 25<br>

 **<u>Etape 3 :</u>** Moyenne(Somme(Nombre de client) par jour) par "groupement de jours"<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte d'analyse
                    st.markdown("""
                    #### **<u>Analyse des grapqhiques :</u>**<br>

On a ici 4 graphiques camembert.<br>
Les 3 premiers representent les ann√©es 2015, 2016 et 2017.<br>
Le dernier repr√©sente toutes les ann√©es.<br>
Sur chacun de ces graphiques, le minimum a √©t√© mis en evidence et a √©t√© d√©tach√© du reste du groupe.<br>

Sur l'ann√©e 2015, le minimum de fr√©quentation se situe sur les num√©ros de jour de 1 √† 5.<br>
Sur les ann√©es 2016 et 2017, le minimum de fr√©quentation se situe sur les num√©ros de jour > 25.<br>
On voit ici que l'on arrive pas d√©gager une r√©elle tendance.<br>

Sur le dernier graphique representant toutes les ann√©es, le minimum se situe √©galement sur les jours > 25.<br>
On remarque cependant que la diff√©rence n'est pas enorme par rapport aux autres groupement de jours.<br>

On peut en conclure que la fr√©quentation reste equilibr√© quel que soit le num√©ro de jour dans le mois.<br>
Si l'on avait pu avoir un jeu donn√©es plus cons√©quent, on aurait pu eventuellement y remarquer une tendance particuli√®re.<br>
                    """,unsafe_allow_html=True)

                else:
                    st.markdown(choix_dict[4])
                    choix_options = ["Par type de jour - Weekend / Jour de la semaine",
                                    "Par jour de la semaine : Lundi, Mardi..."
                                    ]
                    choix_index = ["CLUSTER","PIE"]
                    choix_dict = dict(zip(choix_options,choix_index))

                    choix = st.selectbox("Choisissez le p√©rim√®tre de l'analyse :",options=choix_options,index=1)

                    # Calcul du graphique 
                    plt_graph = load_analyse_1_4(a, choix_dict[choix])

                    # Affichage du graphique
                    st.pyplot(plt_graph)

                    # Affichage M√©thode de calcul
                    st.markdown("""
                        #### **<u>M√©thode de calcul :</u>** <br>

Ici, la moyenne de fr√©quentation a √©t√© calcul√© en deux √©tapes :<br>

**<u>Etape 1 :</u>** Somme(Nombre de client) par semaines et par ann√©es<br>

**<u>Etape 2 :</u>** Moyenne(Somme(Nombre de client) par semaines et par ann√©es) par jour de la semaine<br>
                        """,unsafe_allow_html=True)

                    if choix_dict[choix] == "CLUSTER":

                        # Affichage Texte analyse
                        st.markdown("""
                        #### **<u>Analyse du graphique cluster :</u>**<br>

Ici, on a une representation sous forme de cluster.<br>
La r√©partition est sur le type de jour "Jour de la semaine" ou bien "Fin de semaine".<br>
On voit ici que la r√©paration est equilibr√© en 50/50.<br>

                        """,unsafe_allow_html=True)
                    else:
                        # Affichage Texte analyse
                        st.markdown("""
                        #### **<u>Analyse du graphique camember :</u>**<br>

Ici, on a une r√©partition de la fr√©quentation par rapport au jour de la semaine.<br>
Le minimum a √©t√© mis en evidence et a √©t√© s√©par√© des autres jours de la semaine.<br>
Le minimum se situe √† Mardi avec une valeur de 13%.<br>

La diff√©rence par rapport aux autres jours de la semaine est minime.

                        """,unsafe_allow_html=True)               

            st.markdown("""
            ### Conclusion des analyses de fr√©quentation par rapport √† la p√©riode :<br>

On a pu voir d'apr√®s les analyses pr√©cedentes et les differents point de vue temporel une tendance se degager sur la moyenne de fr√©quentation journali√®re.<br>

Le meilleur mois pour une faible fr√©quentation se situe en Janvier.<br>

Pour le jour dans le mois, ce sont les jours sup√©rieur √† 25 qui enregistrent le moins de fr√©quentation. <br>
Cependant la diff√©rence reste faible par rapport aux  autres jours dans le mois.<br>

En ce qui concerne le jour de la semaine, c'est le Mardi qui est le plus faible en fr√©quentation.<br>
La r√©partition "Jour de la semaine" / "Fin de semaine" est plut√¥t equilibr√© 50/50.

            """,unsafe_allow_html=True)

            with st.expander("üåç - **2) Le meilleur moment pour avoir le plus de diversit√© en terme de pays repr√©sent√©**"):
                st.markdown("""
                ### Le but de cette analyse est de pouvoir :<br>
a) Identifier le mois de l'ann√©e dans lequel on a le plus de diversit√© de pays<br>
b) Identifier le top 3 des pays les plus represent√©s selon le mois de l'ann√©e<br>

Par diversit√©, on entend le moment o√π l'on a le plus de pays diff√©rents represent√©s dans le mois.<br>
                """,unsafe_allow_html=True)

                choix_options = ["Diversit√© des pays par mois et par ann√©es",
                                "TOP 3 des pays les plus represent√©s selon le mois de l'ann√©e"
                                    ]
                choix_index = ["DISTRIBUTION","TOP"]
                choix_dict = dict(zip(choix_options,choix_index))

                choix = st.selectbox("Choisissez le perim√®tre d'analyse",options=choix_options)

                year = st.select_slider("Ann√©e ?", options=select_slider_list_year,label_visibility="visible",key="slider_analyse_2")
                if year == "Toutes ann√©es": year = 0

                if choix_dict[choix] == "DISTRIBUTION":
                    # Calcul du graphique
                    plt_graph = load_analyse_2_1(a,year)

                    # Affichage du graphique
                    st.pyplot(plt_graph)

                    # Affichage Methode de calcul
                    st.markdown("""
                    #### **<u>M√©thode de calcul :</u>**<br>

Le nombre de pays unique est calcul√© selon cette methode :<br>

    Nb Pays Unique = Count Distinct(Pays) pas ann√©es et par mois<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte analyse
                    st.markdown("""
                    #### **<u>Analyse des graphiques :</u>**<br>

Les 3 premiers graphiques ci-dessus representent le nombre de pays unique par mois et pas ann√©es.<br>
Sur chacun de ces 3 graphiques le maximum a √©t√© mis en evidence en rouge.<br>

Pour l'ann√©e 2015, on a un maximum sur le mois d'Octobre.<br>
Pour l'ann√©e 2016, le maximum se situe en Novembre.<br>
Enfin pour l'ann√©e 2017, le maximum se situe en Avril.<br>

Le dernier grapqhique (en noir) represente le nombre de pays unique represent√© par mois pour toutes les ann√©es.<br>
Le maximum se situe en Juin. Les mois d'Avril, Mai, Octobre et Novembre se rapproche du maximum.<br>

                    """,unsafe_allow_html=True)

                else:
                    # Calcul du graphique
                    plt_graph = load_analyse_2_2(a,year)
                    
                    # Affichage du graphique
                    st.pyplot(plt_graph)

                    # Affichage Methode de calcul
                    st.markdown("""
                    #### **<u>M√©thode de calcul :</u>**<br>

Le calcul de la moyenne de fr√©quentation par pays est effectu√© en 2 etapes :<br>

**<u>Etape 1 :**</u> Somme(Nombre de client) par ann√©es, par pays, par mois et par jour<br>

**<u>Etape 2 :**</u> Moyenne(R√©sultat Etape 1) par ann√©e, pays et mois<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte analyse
                    st.markdown("""
                    #### **<u>Analyse des graphiques :</u>**<br>
Les graphiques ci-dessus representent la moyenne de fr√©quentation journali√©r√© par rapport au pays d'origine du client.<br>
Les 3 premieres graphiques representent les ann√©es 2015, 2016 et 2017 d√©coup√©s par mois.<br>

Sur l'ann√©e 2015, les 4 pays les plus representatifs sont la France (FRA), l'Espagne (ESP), le Portugal (PRT) et l'Angleterre (GBR).<br>
On remarque ici un net domination du Portugal sur tous les mois.<br>

Pour l'ann√©e 2016, les 5 pays les plus representatifs sont la France (FRA), l'Espagne (ESP), le Portugal (PRT), l'Angleterre (GBR) et l'Allemagne (DEU).<br>
On remarque ici une nette domination du Portugal suivi de l'Angleterre et enfin de la France.<br>

Enfin pour l'ann√©e 2017, les 5 pays les plus representatifs la France (FRA), le Portugal (PRT), l'Angleterre (GBR), l'Allemagne (DEU) et la Su√®de (SWE).<br>
Comme sur l'ann√©e 2016, on a une nette domination du Portugal suivi de l'Angleterre et enfin de la France. <br>

Sur le graphique final, on a une moyenne toutes ann√©es confondues de la fr√©quentation journali√®re par pays.<br>
On voit encore ici une forte domination du Portugal, suivi de l'Angleterre et de la France.<br>
                    """,unsafe_allow_html=True)


            st.markdown("""
            ### **Conclusions des analyses sur la fr√©quentation par pays :**<br>

Sur les graphiques du nombre de pays unique, on a pu voir que les mois de l'ann√©e representant le plus de diversit√© en terme de pays sont Avril, Mai, Juin et √©galement sur Octobre et Novembre.<br>

Sur les graphiques representant les pays les plus pr√©sents en terme de fr√©quence, on s'appercoit que 3 pays reviennent le plus souvent : France, Portugal et Angleterre.<br>
                """,unsafe_allow_html=True)

            with st.expander("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ - **3) Le meilleur moment pour les voyages selon que l'on s√©journe avec des enfants ou sans enfants**"):
                st.markdown("""
### **Le but de cette analyse est de pouvoir d√©t√©cter les tendances cat√©gories de clients et de sous-cat√©gories de clients :**<br>
Les **cat√©gories** clients sont :
- Client avec enfants<br>
- Client sans enfants<br>

<br>Les **sous-cat√©gories** de client suivantes :
- Couple<br>
- Personne seule<br>
- Groupe <br>
- Enfants non accompagn√©s (uniquement pour la c√©t√©gorie "Avec Enfants")<br>

<br>Ceci permettra de pouvoir choisir la p√©riode la plus propice pour :
 - les voyages avec enfants pour pouvoir profiter d'une atmoshp√®re plus familiale <br>
 - ou bien ceux pr√©f√©rant le moment o√π il y a le moins d'enfants pour plus de tranquilit√© par exemple<br>
 <br>
                """,unsafe_allow_html=True)

                choix_options = ["Par cat√©gorie client - Graphique √† bar",
                                "Par sous cat√©gorie de client - Graphique polaire"
                                    ]
                choix_index = ["CATEGORIE","SOUS-CATEGORIE"]
                choix_dict = dict(zip(choix_options,choix_index))

                choix = st.selectbox("**Choisissez le perim√®tre d'analyse**",options=choix_options)

                if choix_dict[choix] == "CATEGORIE":
                    year = st.select_slider("Ann√©e ?", options=select_slider_list_year,label_visibility="visible",key="slider_analyse_3_1")
                    if year == "Toutes ann√©es": year = 0

                    # Calcul du graphique
                    plt_graph = load_analyse_3_1(a,year)
                        
                    # Affichage du graphique
                    st.pyplot(plt_graph)

                    # Affichage Methode de calcul
                    st.markdown("""
#### **<u>M√©thode de calcul :**</u><br>

Le calcul des fr√©quentations par cat√©gories est effectu√© en deux etapes :<br>

 **<u>Etape 1</u>** : Count(Cat√©gorie) par ann√©e, mois et jours<br>
 
 **<u>Etape 2</u>** : Moyenne(R√©sultat Etape 1) par ann√©e et mois<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte analyse
                    st.markdown("""
#### **<u>Analyse des graphiques :**</u><br>

Les graphiques ci-dessus repr√©sente pour les ann√©es 2015, 2016 et 2017 une moyenne en % des r√©servations par mois et cat√©gorie client.<br>

Pour l'ann√©e 2015, on a pour la cat√©gorie "Sans Enfants" un maximum sur le mois de Septembre et un minimum sur le mois Juillet.<br>
Pour la cat√©gorie "Avec Enfants", on a un maximum en Ao√ªt et un minimum en Novembre.<br>

Pour l'ann√©e 2016, on a pour la cat√©gorie "Sans Enfants" un maximum sur le mois de Septembre et un minimum sur le mois de Janvier.<br>
Pour la cat√©gorie "Avec Enfants", on a un maximum au mois d'Ao√ªt et un minimum en Janvier.<br>

Pour l'ann√©e 2017, on a pour la cat√©gorie "Sans Enfants" pour le mois de Mai et un minimum sur le mois de Septembre.<br>
Pour la cat√©gorie "Avec Enfants", on a un maximum au mois d'Ao√ªt et un minimum sur le mois de Septembre. <br>
Ceci est d√ª au deficit d√©crit lors des pr√©cedentes analyses.<br>

D'un point de vue global, le dernier graphique permet de voir la r√©partition toutes ann√©es confondues.<br>
Pour la cat√©gorie "Sans Enfants", on a un maximum en Mai et un minimum en Janvier/D√©cembre.<br>
Pour la cat√©gorie "Avec Enfants", on a un maximum en Ao√ªt et un minimum en Novembre.<br>
                    """,unsafe_allow_html=True)

                else:
                    # Affichage Texte introduction
                    st.markdown("""
                    #### **<u>Graphique par Sous Cat√©gorie :</u>**
- Couple (Toutes cat√©gories)
- Groupe (Toutes cat√©gories)
- Personne Seule (Toutes cat√©gories)
- Enfants non accompagn√©s (Cat√©gorie 'Avec Enfants')
                    """,unsafe_allow_html=True)

                    # Calcul du graphique
                    plt_graph_list = load_analyse_3_2(a)
                        
                    # Affichage du graphique
                    for plt_graph in plt_graph_list:
                        st.pyplot(plt_graph)

                    # Affichage Methode de calcul
                    st.markdown("""
#### **<u>M√©thode de calcul :</u>**<br>

Le calcul des fr√©quentations par sous-cat√©gories est effectu√© en 2 √©tapes :<br>

**<u>Etape 1 :</u>** Count(R√©servation) par Ann√©e, Cat√©gorie, Sous cat√©gorie, Mois, Jour<br>

**<u>Etape 2 :</u>** Moyenne(R√©sultat Etape 1) par Ann√©e, Cat√©gorie, Sous cat√©gorie, Mois<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte analyse
                    st.markdown("""
                    #### **<u>Analyse des graphiques :</u>**<br>
On ici 2 graphiques repr√©sentant chacun une d√©composition des cat√©gories "Avec Enfants" et "Sans Enfants".<br>
La d√©composition s'effectue par mois en fonction du pourcentage du nombre de r√©servation.<br>

Sur le premier graphique "Avec Enfants", on peut voir que la cat√©gorie couples avec enfants est dominante.<br>
Elle est majoritaire sur le mois d'Ao√ªt.
La cat√©gorie "Enfants non accompagn√©s" est majoritaire sur le mois Novembre.<br>
La cat√©gorie personne seule avec enfants est majoritairement pr√©sente sur les mois de Janvier, F√©vrier et Octobre.<br>
En ce qui concerne la cat√©gorie groupe avec enfants, elle est plut√¥t minime et est majoritaire sur le mois de Janvier.<br>

Sur le second graphique "Sans Enfants", on a toujours une nette domination de la sous-cat√©gorie "Couple".<br>
La cat√©gorie "Personne seule" se situe en deuxi√©me position en terme de volume de r√©servation. <br>
On a un maximum en Janvier et un minimum en Juillet/Ao√ªt.<br>
Pour la cat√©gorie "Groupe", on a un maximum en Juillet/Ao√ªt et un minimum en Novembre.
                    """,unsafe_allow_html=True)

            # Affichage Conclusions Analyse 3
            st.markdown("""
                ### **Conclusions des analyses par "Cat√©gorie Client" et "Sous-cat√©gorie Client" :**<br>

D'apr√®s le graphique de r√©partition par mois et ann√©e, on en conclus ceci :<br>
Pour les personnes souhaitant le calme sans enfants, il est pr√©ferable de r√©server en Mai ou en Novembre.<br>
D'un autre c√¥t√© ceux souhaitant jouir d'une atmosph√©re plus familiale doivent r√©server en Ao√ªt.<br>

Si l'on s'interesse au type de client √† savoir Couple, Groupe ou Personne seules, on en conclus ceci :<br>
Les personnes seules sont plus nombreuses √† reserver au mois de Janvier et Novembre.<br>
Les couples quant √† eux sont plus nombreux √† r√©server en Juillet/Ao√ªt.<br>
Les groupes sont √©galement plus nombreux au mois Juillet/Ao√ªt.<br>

Enfin en ce qui concerne les enfants non accompagn√©s, ils sont plus nombreux au mois de Novembre.<br>

                """,unsafe_allow_html=True)

            with st.expander("üí≥ - **4) Le meilleur moment pour b√©n√©ficier d'un sur-classement de type de chambre ou bien en terme de prix attractif**"):
                # Affichage Introduction
                st.markdown("""
                #### **Le but de cette analyse est :**<br>
a) Visualiser la r√©partition des surclassements et des d√©classement de chambre d'hotel :<br>
> Rappel : les types de chambres sont cat√©goris√©s par lettre allant de A √† L<br>
b) Visualiser cette m√™me r√©partition selon les mois de l'ann√©e<br>

                """,unsafe_allow_html=True)

                # Choix P√©rim√®tre analyse
                choix_options = ["a) Surclassement et D√©classement par r√©partition - Heatmap",
                "b) Surclassement et D√©classement par mois - Histogramme"
                    ]
                choix_index = ["HEATMAP","HISTO"]
                choix_dict = dict(zip(choix_options,choix_index))

                choix = st.selectbox("**Choisissez le perim√®tre d'analyse**",options=choix_options)

                if choix_dict[choix] == "HEATMAP":
                    
                    # Calcul du graphique
                    plt_graph = load_analyse_4_1(a)

                    # Affichage du graphique
                    st.pyplot(plt_graph)

                    # Affichage M√©thode de calcul
                    st.markdown("""
                    #### **<u>M√©thode de calcul :</u>**<br>
Pour effectuer une visualisation graphique sous forme de heat map, on a ici besoin de calculer 3 matrices.<br>
Une matrice pour les surclassements, un deuxi√®me pour les d√©classements et une troisi√®me pour les inchang√©es.<br>

<u>Calcul de la matrice SURCLASSEMENT :</u> <br>
> Etape 1 : Somme(Surclassement)<br>
> Etape 2 : Tableau crois√©e en ligne les chambres reserv√©es, en colonne les chambres assign√©es, en indicateur la somme des surclassements<br>
> Etape 3 : On divise l'indicateur du tableau crois√© par la somme des surclassements de l'Etape 1<br>
> Etape 4 : on remplace les valeurs √† 0 par des NA (pour eviter d'interferer avec les valeurs de declassement et inchang√©es)<br>

<u>Calcul de la matrice DECLASSEMENT :</u><br>
> On applique la m√™me m√©thode que les SURCLASSEMENT en rempla√ßant l'indicateur par la somme des d√©classements<br>

<u>Calcul de la matrice INCHANGEE :</u><br>
> On applique la m√™me m√©thode que les SURCLASSEMENT en rempla√ßant l'indicateur par la somme des inchang√©es<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte Analyse
                    st.markdown("""
                    #### **<u>Analyse du graphique :</u>**<br>
D'apr√®s les analyses du graphique, on en conclus que :<br>

<u>Pour les SURCLASSEMENTS :</u><br>
>* Les forts taux de suclassement se situent sur les cat√©gories B vers A (19%) et D vers A (49%)<br>
>* Les plus faibles taux de surclassement se situent sur les  cat√©gories C et L<br>

<u>Pour les DECLASSEMENTS :</u><br>
>* Les plus forts de taux de d√©classement se situent sur les cat√©gories A vers D (52%), A vers E (7.8%) et D vers E (5.7%)<br>

<u>Pour les INCHANGEES :</u><br>
>* Pour les inchang√©es, les plus fort taux se situent sur les cat√©gories A (62%) et D(22%)<br>
>* Les plus faibles sont situ√©s sur les cat√©gories B (<1%), C(1.14%), H(<1%)<br>
                    """,unsafe_allow_html=True)

                else:
                    # Calcul du graphique
                    plt_graph = load_analyse_4_2(a)

                    # Affichage du graphique
                    st.pyplot(plt_graph)

                    # Affichage M√©thode de calcul
                    st.markdown("""
                    #### **<u>M√©thode de calcul :</u>**<br>
Pour effectuer une visualisation graphique sous forme d'histogramme, on a besoin des 3 indicateurs suivants : <br>
* Total Surclassement par mois<br>
* Total D√©classement par mois<br>
* Total des Inchang√©s par mois<br>""",unsafe_allow_html=True)
                    st.markdown(""" """)
                    st.markdown("""
Ensuite, on calcule le ratio par mois par rapport au total sur l'ann√©e, on multiplie le tout par 100 pour obtenir le pourcentage :<br>
* Ratio D√©classement = Total des d√©classementss par mois / Total des d√©classements sur l'ann√©e * 100<br> 
* Ratio Surclassement = Total des surclassements par mois / Total des surclassements sur l'ann√©e * 100<br>
* Ratio Inchang√©e = Total des inchang√©es par mois / Total des inchang√©es sur l'ann√©e * 100<br>
                    """,unsafe_allow_html=True)

                    # Affichage Texte Analyse
                    st.markdown("""
                    #### **<u>Analyse du graphique :</u>**<br>
D'apr√®s les analyses du graphique, on en conclus que :<br>

<u>Pour les SURCLASSEMENTS (Courbe en bleu) :</u><br>
> * On a 2 pics, le premier en Mars et le deuxi√®me en Juillet<br>
> * On a 2 fortes baisses en Mai et en Novembre<br>

<u>Pour les DECLASSEMENTS (Bar en rouge) :</u><br>
> * On a 2 gros pics en Septembre et en Octobre<br>
> * Les moments les plus faibles sont en Juin et Juillet<br>

<u>Pour les INCHANGEES (Courbe en vert) :</u><br>
>* On un gros pic en Ao√ªt<br>
>* Les moments les plus faibles se situent en d√©but et fin d'ann√©e<br>
                    """,unsafe_allow_html=True)


            st.markdown("""
                ### **Conclusions des analyses des "surclassements" et "d√©classements" de chambre d'h√¥tel :**<br>
Concernant le meilleur type de chambre √† choisir pour b√©n√©ficier d'un surclassement, on a dans l'ordre d√©croissant :<br>
>* Les chambres de type D (49% de surclassement)<br>
>* Les chambres de type B (19% de surclassement)<br>
>* Les chambres de type F (~8% de surclassement)<br>

Concernant les meilleurs moments de l'ann√©e pour b√©n√©ficier d'un surclassement, on a :<br>
>* La p√©riode allant de Juillet √† Ao√ªt<br>
Il faut √©viter les d√©buts et fins d'ann√©e et les mois de Septembre et Octobre qui enregistre les plus forts taux de d√©classement de chambre.<br>
                """,unsafe_allow_html=True)



